#!/bin/zsh
#
# Create or update a virtual environment on a MacOS development system
#
# Three modes:
#   --initialize      create a requirements.txt file based on the latest
#                     versions of the currently installed modules
#   --strict          install the exact packages specified in requirements.txt
#   (default)         upgrade the packages listed in requirements.txt

# check that this is MacOS
if [[ "$(uname)" != "Darwin" ]]; then
    echo "$0 only runs on MacOS"
    exit 1
fi

# assume this script is in the "tools" subdirectory; change to project directory
cd $(dirname $0)/..
PROJECT_DIR=$(pwd)
PROJECT_NAME=$(basename ${PROJECT_DIR})
PROJECT_REQ=${PROJECT_DIR}/requirements.txt
VENV_DIR=${PROJECT_DIR}/venv

# Create a temporary requirements file
TMP_REQ=/tmp/python-requirements-${PID}.txt

# If --initialize is selected, make sure an environment exists
if [[ "$1" == "--initialize" ]]; then
    if [[ ! -d ${VENV_DIR} ]]; then
        echo "Virtual environment ${VENV_DIR} does not exists"
        echo "requirements.txt cannot be initialized"
        exit 1
    fi

    # Create a unversioned requirements file based on the current virtual env
    echo "Initializing requirements.txt from upgrade to installed modules"
    source ${VENV_DIR}/bin/activate
    pip freeze --disable-pip-version-check | awk -F= '{print $1}' > $TMP_REQ
    deactivate

    # set a flag to tell pip to upgrade the modules to the latest
    UPGRADE_FLAG="--upgrade"

# If strict is selected, install the same version as requirements.txt
elif [[ "$1" == "--strict" ]]; then
    echo "installing packages per requirements.txt"
    cat ${PROJECT_REQ} > $TMP_REQ

# Otherwise, upgrade to the latest versions of the modules listed in requirements.txt
elif [[ -z "$1" ]]; then
    if [[ ! -f ${PROJECT_REQ} ]]; then
        echo "Missing ${PROJECT_REQ} file"
        exit 1
    fi
    # Create a versionless requirements file
    echo "Upgrading module versions in requirements.txt"
    awk -F= '{print $1}' < ${PROJECT_REQ}> $TMP_REQ

    # set a flag to tell pip to upgrade the modules to the latest
    UPGRADE_FLAG="--upgrade"

# Exit with an error on unknown options
else
    echo "Unknown option ${1}"
    exit 1
fi

# Make sure Homebrew Python 3.12 is installed
# First check for Apple silicon location
if [[ -e /opt/homebrew/bin/python3.12  ]]; then
    echo "Using Homebrew Python 3.12 on Apple silicon"
    PYBINDIR=/opt/homebrew/bin

# Then check the Intel location
elif [[ -e /usr/local/bin/python3.12  ]]; then
    echo "Using Homebrew Python 3.12 on Intel"
    PYBINDIR=/usr/local/bin

# Exit with an error if Python can't be found
else
    echo "Python 3.12 is not installed"
    exit 1
fi

# If the virtual environment exists, make sure the Python 3.12 version matches
if [[ -d ${VENV_DIR} && "$(${PYBINDIR}/python3.12 -V)" != "$(${VENV_DIR}/bin/python3 -V)" ]]; then
    echo Removing obsolete $(${VENV_DIR}/bin/python3 -V) virtual environment
    rm -rf ${VENV_DIR}
fi

# create virtual environment if it doesn't exist
if [[ ! -d ${VENV_DIR} ]]; then
    ${PYBINDIR}/python3.12 -m venv ${VENV_DIR} --prompt "${PROJECT_NAME}-dev"
    echo Initialized virtual environment ${VENV_DIR}
fi

# activate virtual environment
source ${VENV_DIR}/bin/activate
echo Activating virtual environment ${VENV_DIR}

# read requirements.txt file and install or upgrade Python modules
echo "Installing Python modules"
# If we're using a proxy, download pysocks first as pip requires it
if [ -n "${ALL_PROXY}" ]
then
    echo "Installing proxy functionality"
    ALL_PROXY="" ${VENV_DIR}/bin/pip3 install --disable-pip-version-check pysocks
fi

# install setuptools and wheel first
echo "Installing setup tools"
${VENV_DIR}/bin/pip3 install --disable-pip-version-check setuptools wheel

# now install all packages in the requirements file
echo "Installing packages"
if ! ${VENV_DIR}/bin/pip3 install ${UPGRADE_FLAG} --disable-pip-version-check $(cat ${TMP_REQ}); then
    echo "Module installation failed"
    exit 1
fi

# Save new requirements file
pip freeze --disable-pip-version-check > ${PROJECT_REQ}
echo "Created new requirements.txt file"

# Remove the temporary requirements file
rm ${TMP_REQ} 2> /dev/null